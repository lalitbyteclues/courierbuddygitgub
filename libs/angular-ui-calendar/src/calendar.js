angular.module("ui.calendar", []).constant("uiCalendarConfig", {}).controller("uiCalendarCtrl", ["$scope", "$timeout", function (n, e) { var a = 1, r = 1, t = n.eventSources, o = n.calendarWatchEvent ? n.calendarWatchEvent : angular.noop, u = function (n) { var a; return n && (a = function () { var a = arguments; e(function () { n.apply(this, a) }) }), a }; this.eventsFingerprint = function (n) { return n.__uiCalId || (n.__uiCalId = r++), "" + n.__uiCalId + (n.id || "") + (n.title || "") + (n.url || "") + (+n.start || "") + (+n.end || "") + (n.allDay || "") + (n.className || "") + o(n) || "" }, this.sourcesFingerprint = function (n) { return n.__id || (n.__id = a++) }, this.allEvents = function () { for (var n = [], e = 0, a = t.length; a > e; e++) { var r = t[e]; if (angular.isArray(r)) n.push(r); else if (angular.isObject(r) && angular.isArray(r.events)) { var o = {}; for (var u in r) "_uiCalId" !== u && "events" !== u && (o[u] = r[u]); for (var l = 0; l < r.events.length; l++) angular.extend(r.events[l], o); n.push(r.events) } } return Array.prototype.concat.apply([], n) }, this.changeWatcher = function (n, e) { var a, r = function () { for (var a, r, t = angular.isFunction(n) ? n() : n, u = [], l = 0, i = t.length; i > l; l++) r = t[l], a = e(r), o[a] = r, u.push(a); return u }, t = function (n, e) { var a, r, t = [], o = {}; for (a = 0, r = e.length; r > a; a++) o[e[a]] = !0; for (a = 0, r = n.length; r > a; a++) o[n[a]] || t.push(n[a]); return t }, o = {}, u = function (n, r) { var u, l, i, c, d = {}, f = t(r, n); for (u = 0, l = f.length; l > u; u++) { var s = f[u]; i = o[s], delete o[s]; var v = e(i); v === s ? a.onRemoved(i) : (d[v] = s, a.onChanged(i)) } var g = t(n, r); for (u = 0, l = g.length; l > u; u++) c = g[u], i = o[c], d[c] || a.onAdded(i) }; return a = { subscribe: function (n, e) { n.$watch(r, function (n, a) { e && e(n, a) === !1 || u(n, a) }, !0) }, onAdded: angular.noop, onChanged: angular.noop, onRemoved: angular.noop } }, this.getFullCalendarConfig = function (n, e) { var a = {}; return angular.extend(a, e), angular.extend(a, n), angular.forEach(a, function (n, e) { "function" == typeof n && (a[e] = u(a[e])) }), a } }]).directive("uiCalendar", ["uiCalendarConfig", "$locale", function (n, e) { var a = function (n) { var e, a; e = []; for (a in n) e[a] = n[a]; return e }, r = e.DATETIME_FORMATS; return n = angular.extend({ monthNames: a(r.MONTH), monthNamesShort: a(r.SHORTMONTH), dayNames: a(r.DAY), dayNamesShort: a(r.SHORTDAY) }, n || {}), { restrict: "A", scope: { eventSources: "=ngModel", calendarWatchEvent: "&" }, controller: "uiCalendarCtrl", link: function (e, a, r, t) { function o() { var a, o = r.uiCalendar ? e.$parent.$eval(r.uiCalendar) : {}; a = t.getFullCalendarConfig(o, n), d = { eventSources: u }, angular.extend(d, a); var l = {}; for (var i in d) "eventSources" !== i && (l[i] = d[i]); return JSON.stringify(l) } var u = e.eventSources, l = !1, i = t.changeWatcher(u, t.sourcesFingerprint), c = t.changeWatcher(t.allEvents, t.eventsFingerprint), d = null; e.destroy = function () { r.calendar ? e.calendar = e.$parent[r.calendar] = a.html("") : e.calendar = a.html("") }, e.init = function () { e.calendar.fullCalendar(d) }, i.onAdded = function (n) { e.calendar.fullCalendar("addEventSource", n), l = !0 }, i.onRemoved = function (n) { e.calendar.fullCalendar("removeEventSource", n), l = !0 }, c.onAdded = function (n) { e.calendar.fullCalendar("renderEvent", n) }, c.onRemoved = function (n) { e.calendar.fullCalendar("removeEvents", function (e) { return e === n }) }, c.onChanged = function (n) { e.calendar.fullCalendar("updateEvent", n) }, i.subscribe(e), c.subscribe(e, function (n, e) { return l === !0 ? (l = !1, !1) : void 0 }), e.$watch(o, function (n, a) { e.destroy(), e.init() }) } } }]);
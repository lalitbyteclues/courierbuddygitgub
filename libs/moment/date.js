(function () { "use strict"; var root = this, timezoneJS = {}; "function" == typeof define && define.amd ? define(function () { return timezoneJS }) : "undefined" != typeof exports ? ("undefined" != typeof module && module.exports && (exports = module.exports = timezoneJS), exports.timezoneJS = timezoneJS) : root.timezoneJS = timezoneJS, timezoneJS.VERSION = "0.4.11"; for (var ajax_lib = root.$ || root.jQuery || root.Zepto, fleegix = root.fleegix, DAYS = timezoneJS.Days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], MONTHS = timezoneJS.Months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], SHORT_MONTHS = {}, SHORT_DAYS = {}, EXACT_DATE_TIME = {}, i = 0; i < MONTHS.length; i++) SHORT_MONTHS[MONTHS[i].substr(0, 3)] = i; for (i = 0; i < DAYS.length; i++) SHORT_DAYS[DAYS[i].substr(0, 3)] = i; var _arrIndexOf = Array.prototype.indexOf || function (e) { if (null === this) throw new TypeError; var t = Object(this), i = t.length >>> 0; if (0 === i) return -1; var n = 0; if (arguments.length > 1 && (n = Number(arguments[1]), n != n ? n = 0 : 0 !== n && n !== 1 / 0 && n !== -(1 / 0) && (n = (n > 0 || -1) * Math.floor(Math.abs(n)))), n >= i) return -1; for (var r = n >= 0 ? n : Math.max(i - Math.abs(n), 0) ; i > r; r++) if (r in t && t[r] === e) return r; return -1 }, _fixWidth = function (e, t) { if ("number" != typeof e) throw "not a number: " + e; var i = e > 1e3, n = e.toString(), r = n.length; if (i && r > t) return n.substr(r - t, r); for (n = [n]; t > r;) n.unshift("0"), r++; return n.join("") }, _transport = function (e) { if (e) { if (!e.url) throw new Error("URL must be specified"); if ("async" in e || (e.async = !0), "undefined" == typeof window && "function" == typeof require) { var t = require("fs"); if (e.async) { if ("function" != typeof e.success) return; return e.error = e.error || console.error, t.readFile(e.url, "utf8", function (t, i) { return t ? e.error(t) : e.success(i) }) } return t.readFileSync(e.url, "utf8") } if (!(fleegix && "undefined" != typeof fleegix.xhr || ajax_lib && "undefined" != typeof ajax_lib.ajax)) throw new Error("Please use the Fleegix.js XHR module, jQuery ajax, Zepto ajax, or define your own transport mechanism for downloading zone files."); return e.async ? fleegix && fleegix.xhr ? fleegix.xhr.send({ url: e.url, method: "get", handleSuccess: e.success, handleErr: e.error }) : ajax_lib.ajax({ url: e.url, dataType: "text", method: "GET", error: e.error, success: e.success }) : fleegix && fleegix.xhr ? fleegix.xhr.doReq({ url: e.url, async: !1 }) : ajax_lib.ajax({ url: e.url, async: !1, dataType: "text" }).responseText } }; timezoneJS.Date = function () { if (this === timezoneJS) throw "timezoneJS.Date object must be constructed with 'new'"; var e = Array.prototype.slice.apply(arguments), t = null, i = null, n = [], r = !1; "[object Array]" === Object.prototype.toString.call(e[0]) && (e = e[0]), "string" == typeof e[e.length - 1] && (r = Date.parse(e[e.length - 1].replace(/GMT[\+\-]\d+/, "")), (isNaN(r) || null === r) && (i = e.pop())); var s = !1; switch (e.length) { case 0: t = new Date; break; case 1: t = new Date(e[0]), "string" == typeof e[0] && -1 == e[0].search(/[+-][0-9]{4}/) && -1 == e[0].search(/Z/) && -1 == e[0].search(/T/) && (s = !0); break; case 2: t = new Date(e[0], e[1]), s = !0; break; default: for (var o = 0; 7 > o; o++) n[o] = e[o] || 0; t = new Date(n[0], n[1], n[2], n[3], n[4], n[5], n[6]), s = !0 } if (isNaN(t.getTime())) throw new Error("Invalid date"); this._useCache = !1, this._tzInfo = {}, this._day = 0, this.year = 0, this.month = 0, this.date = 0, this.hours = 0, this.minutes = 0, this.seconds = 0, this.milliseconds = 0, this.timezone = i || null, s ? this.setFromDateObjProxy(t) : this.setFromTimeProxy(t.getTime(), i) }, timezoneJS.Date.prototype = { getDate: function () { return this.date }, getDay: function () { return this._day }, getFullYear: function () { return this.year }, getMonth: function () { return this.month }, getYear: function () { return this.year - 1900 }, getHours: function () { return this.hours }, getMilliseconds: function () { return this.milliseconds }, getMinutes: function () { return this.minutes }, getSeconds: function () { return this.seconds }, getUTCDate: function () { return this.getUTCDateProxy().getUTCDate() }, getUTCDay: function () { return this.getUTCDateProxy().getUTCDay() }, getUTCFullYear: function () { return this.getUTCDateProxy().getUTCFullYear() }, getUTCHours: function () { return this.getUTCDateProxy().getUTCHours() }, getUTCMilliseconds: function () { return this.getUTCDateProxy().getUTCMilliseconds() }, getUTCMinutes: function () { return this.getUTCDateProxy().getUTCMinutes() }, getUTCMonth: function () { return this.getUTCDateProxy().getUTCMonth() }, getUTCSeconds: function () { return this.getUTCDateProxy().getUTCSeconds() }, getTime: function () { return this._timeProxy + 60 * this.getTimezoneOffset() * 1e3 }, getTimezone: function () { return this.timezone }, getTimezoneOffset: function () { return this.getTimezoneInfo().tzOffset }, getTimezoneAbbreviation: function () { return this.getTimezoneInfo().tzAbbr }, getTimezoneInfo: function () { if (this._useCache) return this._tzInfo; var e; return e = this.timezone ? "Etc/UTC" === this.timezone || "Etc/GMT" === this.timezone ? { tzOffset: 0, tzAbbr: "UTC" } : timezoneJS.timezone.getTzInfo(this._timeProxy, this.timezone) : { tzOffset: this.getLocalOffset(), tzAbbr: null }, this._tzInfo = e, this._useCache = !0, e }, getUTCDateProxy: function () { var e = new Date(this._timeProxy); return e.setUTCMinutes(e.getUTCMinutes() + this.getTimezoneOffset()), e }, setDate: function (e) { return this.setAttribute("date", e), this.getTime() }, setFullYear: function (e, t, i) { return void 0 !== i && this.setAttribute("date", 1), this.setAttribute("year", e), void 0 !== t && this.setAttribute("month", t), void 0 !== i && this.setAttribute("date", i), this.getTime() }, setMonth: function (e, t) { return this.setAttribute("month", e), void 0 !== t && this.setAttribute("date", t), this.getTime() }, setYear: function (e) { return e = Number(e), e >= 0 && 99 >= e && (e += 1900), this.setUTCAttribute("year", e), this.getTime() }, setHours: function (e, t, i, n) { return this.setAttribute("hours", e), void 0 !== t && this.setAttribute("minutes", t), void 0 !== i && this.setAttribute("seconds", i), void 0 !== n && this.setAttribute("milliseconds", n), this.getTime() }, setMinutes: function (e, t, i) { return this.setAttribute("minutes", e), void 0 !== t && this.setAttribute("seconds", t), void 0 !== i && this.setAttribute("milliseconds", i), this.getTime() }, setSeconds: function (e, t) { return this.setAttribute("seconds", e), void 0 !== t && this.setAttribute("milliseconds", t), this.getTime() }, setMilliseconds: function (e) { return this.setAttribute("milliseconds", e), this.getTime() }, setTime: function (e) { if (isNaN(e)) throw new Error("Units must be a number."); return this.setFromTimeProxy(e, this.timezone), this.getTime() }, setUTCFullYear: function (e, t, i) { return void 0 !== i && this.setUTCAttribute("date", 1), this.setUTCAttribute("year", e), void 0 !== t && this.setUTCAttribute("month", t), void 0 !== i && this.setUTCAttribute("date", i), this.getTime() }, setUTCMonth: function (e, t) { return this.setUTCAttribute("month", e), void 0 !== t && this.setUTCAttribute("date", t), this.getTime() }, setUTCDate: function (e) { return this.setUTCAttribute("date", e), this.getTime() }, setUTCHours: function (e, t, i, n) { return this.setUTCAttribute("hours", e), void 0 !== t && this.setUTCAttribute("minutes", t), void 0 !== i && this.setUTCAttribute("seconds", i), void 0 !== n && this.setUTCAttribute("milliseconds", n), this.getTime() }, setUTCMinutes: function (e, t, i) { return this.setUTCAttribute("minutes", e), void 0 !== t && this.setUTCAttribute("seconds", t), void 0 !== i && this.setUTCAttribute("milliseconds", i), this.getTime() }, setUTCSeconds: function (e, t) { return this.setUTCAttribute("seconds", e), void 0 !== t && this.setUTCAttribute("milliseconds", t), this.getTime() }, setUTCMilliseconds: function (e) { return this.setUTCAttribute("milliseconds", e), this.getTime() }, setFromDateObjProxy: function (e) { this.year = e.getFullYear(), this.month = e.getMonth(), this.date = e.getDate(), this.hours = e.getHours(), this.minutes = e.getMinutes(), this.seconds = e.getSeconds(), this.milliseconds = e.getMilliseconds(), this._day = e.getDay(), this._dateProxy = e, this._timeProxy = Date.UTC(this.year, this.month, this.date, this.hours, this.minutes, this.seconds, this.milliseconds), this._useCache = !1 }, setFromTimeProxy: function (e, t) { var i = new Date(e), n = t ? timezoneJS.timezone.getTzInfo(e, t, !0).tzOffset : i.getTimezoneOffset(); i.setTime(e + 6e4 * (i.getTimezoneOffset() - n)), this.setFromDateObjProxy(i) }, setAttribute: function (e, t) { if (isNaN(t)) throw new Error("Units must be a number."); var i = this._dateProxy, n = "year" === e ? "FullYear" : e.substr(0, 1).toUpperCase() + e.substr(1); i["set" + n](t), this.setFromDateObjProxy(i) }, setUTCAttribute: function (e, t) { if (isNaN(t)) throw new Error("Units must be a number."); var i = "year" === e ? "FullYear" : e.substr(0, 1).toUpperCase() + e.substr(1), n = this.getUTCDateProxy(); n["setUTC" + i](t), n.setUTCMinutes(n.getUTCMinutes() - this.getTimezoneOffset()), this.setFromTimeProxy(n.getTime() + 6e4 * this.getTimezoneOffset(), this.timezone) }, setTimezone: function (e) { var t = this.getTimezoneInfo().tzOffset; this.timezone = e, this._useCache = !1, this.setUTCMinutes(this.getUTCMinutes() - this.getTimezoneInfo().tzOffset + t) }, removeTimezone: function () { this.timezone = null, this._useCache = !1 }, valueOf: function () { return this.getTime() }, clone: function () { return this.timezone ? new timezoneJS.Date(this.getTime(), this.timezone) : new timezoneJS.Date(this.getTime()) }, toGMTString: function () { return this.toString("EEE, dd MMM yyyy HH:mm:ss Z", "Etc/GMT") }, toLocaleString: function () { }, toLocaleDateString: function () { }, toLocaleTimeString: function () { }, toSource: function () { }, toISOString: function () { return this.toString("yyyy-MM-ddTHH:mm:ss.SSS", "Etc/UTC") + "Z" }, toJSON: function () { return this.toISOString() }, toDateString: function () { return this.toString("EEE MMM dd yyyy") }, toTimeString: function () { return this.toString("H:mm k") }, toString: function (e, t) { e || (e = "yyyy-MM-ddTHH:mm:ss.SSS"); var i = e, n = t ? timezoneJS.timezone.getTzInfo(this.getTime(), t) : this.getTimezoneInfo(), r = this; t && (r = this.clone(), r.setTimezone(t)); var s = r.getHours(); return i.replace(/a+/g, function () { return "k" }).replace(/y+/g, function (e) { return _fixWidth(r.getFullYear(), e.length) }).replace(/d+/g, function (e) { return _fixWidth(r.getDate(), e.length) }).replace(/m+/g, function (e) { return _fixWidth(r.getMinutes(), e.length) }).replace(/s+/g, function (e) { return _fixWidth(r.getSeconds(), e.length) }).replace(/S+/g, function (e) { return _fixWidth(r.getMilliseconds(), e.length) }).replace(/h+/g, function (e) { return _fixWidth(s % 12 === 0 ? 12 : s % 12, e.length) }).replace(/M+/g, function (e) { var t = r.getMonth(), i = e.length; return i > 3 ? timezoneJS.Months[t] : i > 2 ? timezoneJS.Months[t].substring(0, i) : _fixWidth(t + 1, i) }).replace(/k+/g, function () { return s >= 12 ? (s > 12 && (s -= 12), "PM") : "AM" }).replace(/H+/g, function (e) { return _fixWidth(s, e.length) }).replace(/E+/g, function (e) { return DAYS[r.getDay()].substring(0, e.length) }).replace(/Z+/gi, function () { return n.tzAbbr }) }, toUTCString: function () { return this.toGMTString() }, civilToJulianDayNumber: function (e, t, i) { var n; t++, t > 12 && (n = parseInt(t / 12, 10), t %= 12, e += n), 2 >= t && (e -= 1, t += 12), n = Math.floor(e / 100); var r = 2 - n + Math.floor(n / 4), s = Math.floor(365.25 * (e + 4716)) + Math.floor(30.6001 * (t + 1)) + i + r - 1524; return s }, getLocalOffset: function () { return this._dateProxy.getTimezoneOffset() } }, timezoneJS.timezone = new function () { function invalidTZError(e) { throw new Error("Timezone '" + e + "' is either incorrect, or not loaded in the timezone registry.") } function builtInLoadZoneFile(e, t) { var i = _this.zoneFileBasePath + "/" + e; return t && t.async ? _this.transport({ async: !0, url: i, success: function (e) { return _this.parseZones(e) && "function" == typeof t.callback && t.callback() }, error: function () { throw new Error("Error retrieving '" + i + "' zoneinfo files") } }) : _this.parseZones(_this.transport({ url: i, async: !1 })) } function getRegionForTimezone(e) { var t, i, n = regionExceptions[e]; if (n) return n; if (t = e.split("/")[0], i = regionMap[t]) return i; var r = _this.zones[e]; return "string" == typeof r ? getRegionForTimezone(r) : _this.loadedZones.backward ? void invalidTZError(e) : (_this.loadZoneFile("backward"), getRegionForTimezone(e)) } function parseTimeString(e) { var t = /(\d+)(?::0*(\d*))?(?::0*(\d*))?([wsugz])?$/, i = e.match(t); return i[1] = parseInt(i[1], 10), i[2] = i[2] ? parseInt(i[2], 10) : 0, i[3] = i[3] ? parseInt(i[3], 10) : 0, i.slice(1, 5) } function processZone(e) { if (e[3]) { var t = parseInt(e[3], 10), i = 11, n = 31; e[4] && (i = SHORT_MONTHS[e[4].substr(0, 3)], n = parseInt(e[5], 10) || 1); var r = e[6] ? parseTimeString(e[6]) : [0, 0, 0]; return [t, i, n, r[0], r[1], r[2]] } } function getZone(e, t) { for (var i = "number" == typeof e ? e : new Date(e).getTime(), n = t, r = _this.zones[n]; "string" == typeof r;) n = r, r = _this.zones[n]; if (!r) { if (!_this.loadedZones.backward) return _this.loadZoneFile("backward"), getZone(e, t); if (n && n !== t) return _this.lazyLoadZoneFiles(n), getZone(e, n); invalidTZError(n) } if (0 === r.length) throw new Error("No Zone found for '" + t + "' on " + e); for (var s = r.length - 1; s >= 0; s--) { var o = r[s]; if (o[3] && i > o[3]) break } return r[s + 1] } function getBasicOffset(e) { var t = parseTimeString(e), i = "-" === e.charAt(0) ? -1 : 1; return t = i * (1e3 * (60 * (60 * t[0] + t[1]) + t[2])), t / 60 / 1e3 } function getAdjustedOffset(e, t) { return -Math.ceil(t - e) } function getRule(e, t, i) { var n = "number" == typeof e ? new Date(e) : e, r = t[1], s = t[0], o = r.match(/^([0-9]):([0-9][0-9])$/); if (o) return [-1e6, "max", "-", "Jan", 1, [0, 0, 0], 60 * parseInt(o[1], 10) + parseInt(o[2], 10), "-"]; var a, u = function (e, t, i) { var n = 0; if ("u" === t || "g" === t || "z" === t) n = 0; else if ("s" === t) n = s; else { if ("w" !== t && t) throw new Error("unknown type " + t); n = getAdjustedOffset(s, i[6]) } return n *= 6e4, new Date(e.getTime() + n) }, h = function (e, t) { var i, n = e[0], r = e[1], s = r[5]; if (EXACT_DATE_TIME[n] || (EXACT_DATE_TIME[n] = {}), EXACT_DATE_TIME[n][r]) i = EXACT_DATE_TIME[n][r]; else { if (isNaN(r[4])) { var o, a; "last" === r[4].substr(0, 4) ? (i = new Date(Date.UTC(n, SHORT_MONTHS[r[3]] + 1, 1, s[0] - 24, s[1], s[2], 0)), o = SHORT_DAYS[r[4].substr(4, 3)], a = "<=") : (i = new Date(Date.UTC(n, SHORT_MONTHS[r[3]], r[4].substr(5), s[0], s[1], s[2], 0)), o = SHORT_DAYS[r[4].substr(0, 3)], a = r[4].substr(3, 2)); var h = i.getUTCDay(); ">=" === a ? i.setUTCDate(i.getUTCDate() + (o - h + (h > o ? 7 : 0))) : i.setUTCDate(i.getUTCDate() + (o - h - (o > h ? 7 : 0))) } else i = new Date(Date.UTC(n, SHORT_MONTHS[r[3]], r[4], s[0], s[1], s[2], 0)); EXACT_DATE_TIME[n][r] = i } return t && (i = u(i, s[3], t)), i }, c = function (e, t) { for (var i = [], n = 0; t && n < t.length; n++) t[n][0] <= e && (t[n][1] >= e || t[n][0] === e && "only" === t[n][1] || "max" === t[n][1]) && i.push([e, t[n]]); return i }, f = function (e, t, n) { var r, s; return e instanceof Date ? n && (e = u(e, i ? "u" : "w", n)) : (r = e[0], s = e[1], e = !n && EXACT_DATE_TIME[r] && EXACT_DATE_TIME[r][s] ? EXACT_DATE_TIME[r][s] : h(e, n)), t instanceof Date ? n && (t = u(t, i ? "u" : "w", n)) : (r = t[0], s = t[1], t = !n && EXACT_DATE_TIME[r] && EXACT_DATE_TIME[r][s] ? EXACT_DATE_TIME[r][s] : h(t, n)), e = Number(e), t = Number(t), e - t }, l = n.getUTCFullYear(); a = c(l, _this.rules[r]), a.push(n), a.sort(f), _arrIndexOf.call(a, n) < 2 && (a = a.concat(c(l - 1, _this.rules[r])), a.sort(f)); var g = _arrIndexOf.call(a, n); return g > 1 && f(n, a[g - 1], a[g - 2][1]) < 0 ? a[g - 2][1] : g > 0 && g < a.length - 1 && f(n, a[g + 1], a[g - 1][1]) > 0 ? a[g + 1][1] : 0 === g ? null : a[g - 1][1] } function getAbbreviation(e, t) { var i = e[2]; if (i.indexOf("%s") > -1) { var n; return n = t ? "-" === t[7] ? "" : t[7] : "S", i.replace("%s", n) } return i.indexOf("/") > -1 ? i.split("/", 2)[t && t[6] ? 1 : 0] : i } var _this = this, regionMap = { Etc: "etcetera", EST: "northamerica", MST: "northamerica", HST: "northamerica", EST5EDT: "northamerica", CST6CDT: "northamerica", MST7MDT: "northamerica", PST8PDT: "northamerica", America: ["northamerica", "southamerica"], Pacific: "australasia", Atlantic: "europe", Africa: "africa", Indian: "africa", Antarctica: "antarctica", Asia: "asia", Australia: "australasia", Europe: "europe", WET: "europe", CET: "europe", MET: "europe", EET: "europe" }, regionExceptions = { "Pacific/Honolulu": "northamerica", "Atlantic/Bermuda": "northamerica", "Atlantic/Cape_Verde": "africa", "Atlantic/St_Helena": "africa", "Indian/Kerguelen": "antarctica", "Indian/Chagos": "asia", "Indian/Maldives": "asia", "Indian/Christmas": "australasia", "Indian/Cocos": "australasia", "America/Danmarkshavn": "europe", "America/Scoresbysund": "europe", "America/Godthab": "europe", "America/Thule": "europe", "Asia/Istanbul": "europe", "Asia/Yekaterinburg": "europe", "Asia/Omsk": "europe", "Asia/Novosibirsk": "europe", "Asia/Krasnoyarsk": "europe", "Asia/Irkutsk": "europe", "Asia/Yakutsk": "europe", "Asia/Vladivostok": "europe", "Asia/Sakhalin": "europe", "Asia/Magadan": "europe", "Asia/Kamchatka": "europe", "Asia/Anadyr": "europe", "Africa/Ceuta": "europe", GMT: "etcetera", "Europe/Nicosia": "asia" }; this.zoneFileBasePath = null, this.zoneFiles = ["africa", "antarctica", "asia", "australasia", "backward", "etcetera", "europe", "northamerica", "pacificnew", "southamerica"], this.loadingSchemes = { PRELOAD_ALL: "preloadAll", LAZY_LOAD: "lazyLoad", MANUAL_LOAD: "manualLoad" }, this.getRegionForTimezone = getRegionForTimezone, this.loadingScheme = this.loadingSchemes.LAZY_LOAD, this.loadedZones = {}, this.zones = {}, this.rules = {}, this.init = function (e) { var t = { async: !0 }, i = this.loadingScheme === this.loadingSchemes.PRELOAD_ALL ? this.zoneFiles : this.defaultZoneFile || "northamerica"; for (var n in e) t[n] = e[n]; return this.loadZoneFiles(i, t) }, this.loadZoneFiles = function (e, t) { var i, n = 0; if ("string" == typeof e) return this.loadZoneFile(e, t); t = t || {}, i = t.callback, t.callback = function () { n++, n === e.length && "function" == typeof i && i() }; for (var r = 0; r < e.length; r++) this.loadZoneFile(e[r], t) }, this.loadZoneFile = function (e, t) { if ("undefined" == typeof this.zoneFileBasePath) throw new Error("Please define a base path to your zone file directory -- timezoneJS.timezone.zoneFileBasePath."); if (!this.loadedZones[e]) return this.loadedZones[e] = !0, builtInLoadZoneFile(e, t) }, this.loadZoneJSONData = function (url, sync) { var processData = function (data) { data = eval("(" + data + ")"); for (var z in data.zones) _this.zones[z] = data.zones[z]; for (var r in data.rules) _this.rules[r] = data.rules[r] }; return sync ? processData(_this.transport({ url: url, async: !1 })) : _this.transport({ url: url, success: processData }) }, this.loadZoneDataFromObject = function (e) { if (e) { for (var t in e.zones) _this.zones[t] = e.zones[t]; for (var i in e.rules) _this.rules[i] = e.rules[i] } }, this.getAllZones = function () { var e = []; for (var t in this.zones) e.push(t); return e.sort() }, this.parseZones = function (e) { if (!e) return !1; for (var t, i = e.split("\n"), n = [], r = "", s = null, o = null, a = 0; a < i.length; a++) if (t = i[a], t.match(/^\s/) && (t = "Zone " + s + t), t = t.split("#")[0], t.length > 3) switch (n = t.split(/\s+/), r = n.shift()) { case "Zone": if (s = n.shift(), _this.zones[s] || (_this.zones[s] = []), n.length < 3) break; n.splice(3, n.length, processZone(n)), n[3] && (n[3] = Date.UTC.apply(null, n[3])), n[0] = -getBasicOffset(n[0]), _this.zones[s].push(n); break; case "Rule": o = n.shift(), _this.rules[o] || (_this.rules[o] = []), n[0] = parseInt(n[0], 10), n[1] = parseInt(n[1], 10) || n[1], n[5] = parseTimeString(n[5]), n[6] = getBasicOffset(n[6]), _this.rules[o].push(n); break; case "Link": if (_this.zones[n[1]]) throw new Error("Error with Link " + n[1] + ". Cannot create link of a preexisted zone."); isNaN(n[0]) ? _this.zones[n[1]] = n[0] : _this.zones[n[1]] = parseInt(n[0], 10) } return !0 }, this.transport = _transport, this.getTzInfo = function (e, t, i) { this.lazyLoadZoneFiles(t); var n = getZone(e, t), r = +n[0], s = getRule(e, n, i); s && (r = getAdjustedOffset(r, s[6])); var o = getAbbreviation(n, s); return { tzOffset: r, tzAbbr: o } }, this.lazyLoadZoneFiles = function (e) { if (this.loadingScheme === this.loadingSchemes.LAZY_LOAD) { var t = getRegionForTimezone(e); if (!t) throw new Error("Not a valid timezone ID."); this.loadZoneFiles(t) } } } }).call("undefined" != typeof window ? window : this);
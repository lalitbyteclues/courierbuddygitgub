!function () { "use strict"; angular.module("permission", ["ui.router"]).run(["$rootScope", "Permission", "$state", "$q", function (e, n, r, t) { e.$on("$stateChangeStart", function (o, i, a, s, c) { if (!i.$$finishAuthorize) { var f; if (i.data && i.data.permissions ? f = i.data.permissions : i.permissions && (console.log("Deprecation Warning: permissions should be set inside the `data` key "), console.log("Setting permissions for a state outside `data` will be depracated in version 1"), f = i.permissions), f) { if (o.preventDefault(), i = angular.extend({ $$finishAuthorize: !0 }, i), e.$broadcast("$stateChangePermissionStart", i, a).defaultPrevented) return; n.authorize(f, a).then(function () { e.$broadcast("$stateChangeStart", i, a, s, c).defaultPrevented || (e.$broadcast("$stateChangePermissionAccepted", i, a), r.go(i.name, a, { notify: !1 }).then(function () { e.$broadcast("$stateChangeSuccess", i, a, s, c) })) }, function () { if (!e.$broadcast("$stateChangeStart", i, a, s, c).defaultPrevented) { e.$broadcast("$stateChangePermissionDenied", i, a); var n = f.redirectTo; angular.isFunction(n) ? (n = n(), t.when(n).then(function (e) { e && r.go(e, a) })) : n && r.go(n, a) } }) } } }) }]) }(), function () { "use strict"; angular.module("permission").provider("Permission", function () { var e = {}, n = function (e, n) { if (!angular.isString(e)) throw new Error("Role name must be a string"); if (!angular.isFunction(n)) throw new Error("Validation function not provided correctly") }, r = function (e, r) { if (!angular.isArray(e)) throw new Error("Roles must be an array"); for (var t = 0; t < e.length; t++) n(e[t], r) }; this.defineRole = function (r, t) { return n(r, t), e[r] = t, this }, this.$get = ["$q", function (t) { var o = { _promiseify: function (e) { if (e && angular.isFunction(e.then)) return e; var n = t.defer(); return e ? n.resolve() : n.reject(), n.promise }, _validateRoleMap: function (e) { if ("object" != typeof e || e instanceof Array) throw new Error("Role map has to be an object"); if (void 0 === e.only && void 0 === e.except) throw new Error('Either "only" or "except" keys must me defined'); if (e.only) { if (!(e.only instanceof Array)) throw new Error("Array of roles expected") } else if (e.except && !(e.except instanceof Array)) throw new Error("Array of roles expected") }, _findMatchingRole: function (e, n) { var r = angular.copy(e), i = t.defer(), a = r.shift(); if (!a) return i.reject(), i.promise; if (!angular.isFunction(o.roleValidations[a])) throw new Error("undefined role or invalid role validation"); var s = o.roleValidations[a](n, a); return s = o._promiseify(s), s.then(function () { i.resolve() }, function () { o._findMatchingRole(r, n).then(function () { i.resolve() }, function () { i.reject() }) }), i.promise }, defineRole: function (e, r) { return n(e, r), o.roleValidations[e] = r, o }, defineManyRoles: function (e, n) { r(e, n); for (var t = o, i = 0; i < e.length; i++) t = t.defineRole(e[i], n); return t }, resolveIfMatch: function (e, n) { var r = angular.copy(e), i = t.defer(); return o._findMatchingRole(r, n).then(function () { i.resolve() }, function () { i.reject() }), i.promise }, rejectIfMatch: function (e, n) { var r = t.defer(); return o._findMatchingRole(e, n).then(function () { r.reject() }, function () { r.resolve() }), r.promise }, roleValidations: e, authorize: function (e, n) { o._validateRoleMap(e); var r; return r = e.only ? o.resolveIfMatch(e.only, n) : o.rejectIfMatch(e.except, n) } }; return o }] }) }();